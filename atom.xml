<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木筏的博客</title>
  
  
  <link href="https://yuliascott.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://yuliascott.github.io/blog/"/>
  <updated>2021-03-13T03:19:22.943Z</updated>
  <id>https://yuliascott.github.io/blog/</id>
  
  <author>
    <name>木筏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpack实战(2)-居玉皓著</title>
    <link href="https://yuliascott.github.io/blog/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/Webpack%E5%AE%9E%E6%88%98(2)-%E5%B1%85%E7%8E%89%E7%9A%93%E8%91%97/"/>
    <id>https://yuliascott.github.io/blog/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/Webpack%E5%AE%9E%E6%88%98(2)-%E5%B1%85%E7%8E%89%E7%9A%93%E8%91%97/</id>
    <published>2021-03-12T16:12:48.000Z</published>
    <updated>2021-03-13T03:19:22.943Z</updated>
    
    <content type="html"><![CDATA[<p>基于《Webpack实战 入门、进阶与调优》学习Webpack，搭建学习demo，共两个部分，本文是第二部分。</p><br /><br /><h1 id="—七、代码分片"><a href="#—七、代码分片" class="headerlink" title="—七、代码分片"></a>—七、代码分片</h1><p>代码分片可以有效降低首屏加载资源的大小，同时也会带来新的问题，如哪些模块进行分片、分片后的资源如何处理等。</p><ul><li>CommonsChunkPlugin：Webpack 4之前内部自带的插件</li><li>optimization.SplitChunks：是Webpack 4为了改进CommonsChunkPlugin而重新设计和实现的代码分片特性</li></ul><br /><p>当前Webpack版本 5.23.0，配置optimization.SplitChunks：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">let</span> ENV = process.env.ENV;</span><br><span class="line"><span class="keyword">let</span> isProd = ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: isProd ? <span class="string">&#x27;bundle@[chunkhash].js&#x27;</span> : <span class="string">&#x27;[name].js&#x27;</span>, <span class="comment">//:&#x27;bundle.js&#x27;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mode: ENV,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">                    publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    cacheDirectory: <span class="literal">true</span>, <span class="comment">//缓存机制, 重复打包未改变的模块防止二次编译</span></span><br><span class="line">                    presets: [[</span><br><span class="line">                        <span class="string">&#x27;@babel/env&#x27;</span>, &#123;</span><br><span class="line">                            modules: <span class="literal">false</span>, <span class="comment">//禁用模块语句的转化, 将ES6 Module的语法交给Webpack本身处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ], [</span><br><span class="line">                        <span class="string">&#x27;@babel/preset-react&#x27;</span>, &#123;</span><br><span class="line">                            modules: <span class="literal">false</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">            enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定bundle的来源，并具有优先级高于contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，查看打包结果：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/SplitChunks.png" alt="optimization.SplitChunks终端输出"></p><br /><br /><h1 id="八、生产环境配置"><a href="#八、生产环境配置" class="headerlink" title="八、生产环境配置"></a>八、生产环境配置</h1><h2 id="8-1-配置生产和开发环境"><a href="#8-1-配置生产和开发环境" class="headerlink" title="8.1  配置生产和开发环境"></a>8.1  配置生产和开发环境</h2><p>1）使用相同的配置文件：</p><p>package.json：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;set ENV=production&amp;&amp; webpack&quot;, //‘&amp;&amp;’前面不要加空格，否则获取的值包含空格</span><br><span class="line">  &quot;dev&quot;: &quot;set ENV=development&amp;&amp; webpack-dev-server&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ENV = process.env.ENV;</span><br><span class="line"><span class="keyword">const</span> isProd =  ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: isProd ? <span class="string">&#x27;bundle@[chunkhash].js&#x27;</span> : <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: ENV,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定bundle的来源，并具有优先级高于contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npm run build</code>，即可查看dist目录生成的文件；</p><pre><code>许多框架和库都采用process.env.NODE_ENV作为一个区别开发环境和生产环境的变量。process.env是Node.js用于保存当前进程环境变量的对象；而NODE_ENV则可以让开发者指定当前的运行环境。</code></pre><br /><p>2）为不同的环境创建各自的配置文件：</p><p>生产环境创建一个webpack.production.config.js，开发环境创建一个叫webpack.development.config.js，然后修改package.json：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack --config=webpack.production.config.js&quot;,</span><br><span class="line">  &quot;dev&quot;: &quot;webpack-dev-server --config=webpack.development.config.js&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>将webpack.production.config.js和webpack.development.config.js的公共的配置提取出来，单独创建一个webpack.common.config.js；</p><br /><p>让另外两个JS分别引用webpack.common.config.js，并添加自身环境的配置；也可以使用webpack-merge，它是一个专门用来做Webpack配置合并的工具；</p><h2 id="8-2-—source-map"><a href="#8-2-—source-map" class="headerlink" title="8.2  —source map"></a>8.2  —source map</h2><p>source map指的是将编译、打包、压缩后的代码映射回源代码的过程。Webpack打包压缩后的代码基本不具备可读性，若代码抛出一个错误，有了source map，再加上浏览器调试工具（devtools），就非常容易了。</p><br /><p>JavaScript的source map配置很简单，只要在webpack.config.js中添加devtool即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  devtool:<span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">                    这是App组件！</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，F12打开chrome Dev Tool：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/usesourcemap1.png" alt="引用source map开发者显示结果1"></p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/usesourcemap2.png" alt="引用source map开发者显示结果2"></p><p>对于CSS、SCSS、Less来说，则需要添加额外的source map配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, &#123;</span><br><span class="line">                loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    sourceMap: <span class="literal">true</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&#x27;postcss-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webpack支持多种source map的形式。除了配置为devtool：’source-map’以外，还可以根据不同的需求选择cheap-source-map、eval-source-map等。</p><br /><p>有了source map意味着任何人通过浏览器的开发者工具都可以看到工程源码，存在极大的安全性。如何保持功能的同时，防止暴露源码给用户呢？Webpack提供了hidden-source-map和nosources-source-map两种策略来提升source map的安全性。</p><br /><p>hidden-source-map意味着Webpack仍然会产生完整的map文件，只不过不会在bundle文件中添加对于map文件的引用。若我们想要追溯源码，则需要利用一些第三方服务，将map文件上传到上面。目前流行的解决方案是Sentry。</p><br /><p>nosources-source-map对于安全保护没那么强，但是使用方式相对简单，可以在浏览器开发者工具的sources选项卡中看到源码的目录结构，但是文件的具体内容会被隐藏起来。</p><br /><p>在这些配置之外，我们还可以正常打包出source map，然后通过服务器的nginx设置将.map文件只对固定的白名单（比如公司内网）开放，这样我们仍然能看到源码，而一般用户的浏览器中无法获取。</p><h2 id="8-3-资源压缩"><a href="#8-3-资源压缩" class="headerlink" title="8.3  资源压缩"></a>8.3  资源压缩</h2><h3 id="8-3-1-压缩JS"><a href="#8-3-1-压缩JS" class="headerlink" title="8.3.1  压缩JS"></a>8.3.1  压缩JS</h3><p>Webpack 3开启压缩需调用webpack.optimize.UglifyJsPlugin；</p><br /><p>Webpack 4配置移到config.optimization.minimize：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">      optimization: &#123;</span><br><span class="line">        minimize: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>terser-webpack-plugin插件配置。</p><h3 id="8-3-2-压缩CSS"><a href="#8-3-2-压缩CSS" class="headerlink" title="8.3.2  压缩CSS"></a>8.3.2  压缩CSS</h3><p>压缩CSS文件的前提是使用extract-text-webpack-plugin或mini-css-extract-plugin将样式提取出来，接着使用optimize-css-assets-webpack-plugin来进行压缩，这个插件本质上使用的是压缩器cssnano。</p><h3 id="8-3-3-缓存"><a href="#8-3-3-缓存" class="headerlink" title="8.3.3  缓存"></a>8.3.3  缓存</h3><p>1）资源hash</p><p>一个常用的方法是在每次打包的过程中对资源的内容计算一次hash，并作为版本号存放在文件名中，如bundle@2e0a691e769edb228e2.js。bundle是文件本身的名字，@后面跟的是文件内容hash值，每当代码发生变化时相应的hash也会变化。</p><br /><p>2）输出动态HTML</p><p>资源名的改变意味着HTML中的引用路径的改变。每次更改后都要手动去维护很麻烦，理想的情况是打包结束后自动把最新的资源名同步过去。使用html-webpack-plugin插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><pre><code>当前版本html-webpack-plugin 5.2.0；</code></pre><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">&#x27;./public/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释index.html中引用bundle.js的script标签；</p><p>执行<code>npm run dev</code>，验证结果；</p><br /><p>3）使chunk id更稳定</p><p>理想状态下，对于缓存的应用是尽量让用户在启动时只更新代码变化的部分，而对没有变化的部分使用缓存。</p><p>之前我们介绍过使用CommonsChunkPlugin和SplitChunksPlugin来划分代码。通过它们来尽可能地将一些不常变动的代码单独提取出来，与经常迭代的业务代码区别开，这些资源就可以在客户端一直使用缓存。</p><br /><p>4）bundle体积监控和分析</p><p>为了保证良好的用户体验，我们可以对打包输出的bundle体积进行持续的监控，以防止不必要的冗余模块被添加进来。</p><p>VS Code中有一个插件Import Cost可以帮助我们对引入模块的大小进行实时监测。每当我们在代码中引入一个新的模块（主要是node_modules中的模块）时，它都会为我们计算该模块压缩后及gzip过后将占多大体积：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/ImportCostPlugin.png" alt="Import Cost插件"></p><p>当我们发现某些包过大时就可以采取一些措施，比如寻找一些更小的替代方案或只引用其中的某些子模块。</p><p>另外一个很有用的工具是webpack-bundle-analyzer，它能够帮助我们分析一个bundle的构成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-bundle-analyzer --save-dev</span><br></pre></td></tr></table></figure><pre><code>当前版本webpack-bundle-analyzer 4.4.0；</code></pre><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Analyzer = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">     <span class="keyword">new</span> Analyzer()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，浏览器打开http://127.0.0.1:8888/，查看生成的bundle的模块组成结构图，每个模块所占的体积一目了然：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/bundleModuleImg.png" alt="bundle的模块组成结构图"></p><p>最后我们还需要自动化地对资源体积进行监控，bundlesize这个工具包可以做到这一点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bundlesize --save-dev</span><br></pre></td></tr></table></figure><pre><code>当前版本bundlesize 0.18.1；</code></pre><p>package.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">      <span class="attr">&quot;bundlesize&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;./dist/bundle.js&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;maxSize&quot;</span>: <span class="string">&quot;50 kB&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;test:size&quot;</span>: <span class="string">&quot;bundlesize&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npm run build</code>，dist文件夹生成bundle.js文件，再执行<code>npm run test:size</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/testsize.png" alt="验证bundle大小"></p><br /><br /><h1 id="九、打包优化"><a href="#九、打包优化" class="headerlink" title="九、打包优化"></a>九、打包优化</h1><p>主要介绍一些优化Webpack配置的方法，目的是让打包的速度更快，输出的资源更小。首先重述一条软件工程领域的经验——不要过早优化，在项目的初期不要看到任何优化点就拿来加到项目中，这样不但增加了复杂度，优化的效果也不会太理想。一般是当项目发展到一定规模后，性能问题随之而来，这时再去分析然后对症下药，才有可能达到理想的优化效果。</p><br /><h2 id="9-1-HappyPack"><a href="#9-1-HappyPack" class="headerlink" title="9.1  HappyPack"></a>9.1  HappyPack</h2><p>HappyPack是一个通过多线程来提升Webpack打包速度的工具。</p><br /><h2 id="9-2-缩小打包作用域"><a href="#9-2-缩小打包作用域" class="headerlink" title="9.2  缩小打包作用域"></a>9.2  缩小打包作用域</h2><h3 id="9-2-1-exclude和include"><a href="#9-2-1-exclude和include" class="headerlink" title="9.2.1  exclude和include"></a>9.2.1  exclude和include</h3><br /><h3 id="9-2-2-noParse"><a href="#9-2-2-noParse" class="headerlink" title="9.2.2  noParse"></a>9.2.2  noParse</h3><p>有些库我们是希望Webpack完全不要去进行解析的，即不希望应用任何loader规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    noParse:<span class="regexp">/lodash/</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置将会忽略所有文件名中包含lodash的模块，这些模块仍然会被打包进资源文件，只不过Webpack不会对其进行任何解析。</p><br /><p>在Webpack 3及之后的版本还支持完整的路径匹配：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    noParse:<span class="function"><span class="keyword">function</span>(<span class="params">fullPath</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// fullPath是绝对路径，如：/users/me/app/webpack-no-parse/lib/lodash.js</span></span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/lib/</span>.test(fullPath);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置将会忽略所有lib目录下的资源解析。</p><h3 id="9-2-3-IgnorePlugin"><a href="#9-2-3-IgnorePlugin" class="headerlink" title="9.2.3  IgnorePlugin"></a>9.2.3  IgnorePlugin</h3><p>插件IgnorePlugin完全排除一些模块，被排除的模块即便被引用也不会被打包进资源文件中。</p><p>如，Moment.js是一个日期时间处理相关的库，为了做本地化它会加载很多语言包，对于我们来说一般用不到其他地区的语言包，但是它们会占很多体积，这时就可以用IgnorePlugin来去掉。</p><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">    <span class="keyword">new</span> webpack.IgnorePlugin(&#123;</span><br><span class="line">    resourceRegExp:<span class="regexp">/^\.\/locale$/</span>, <span class="comment">//匹配资源文件</span></span><br><span class="line">    contextRegExp:<span class="regexp">/moment$/</span>, <span class="comment">//匹配检索目录</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="9-2-4-Cache"><a href="#9-2-4-Cache" class="headerlink" title="9.2.4  Cache"></a>9.2.4  Cache</h3><p>有些loader会有一个cache配置项，用来在编译代码后同时保存一份缓存，在执行下一次编译前会先检查源码文件是否有变化，如果没有就直接采用缓存，也就是上次编译的结果。这样相当于实际编译的只有变化了的文件，整体速度会有一定提升。</p><br /><p>在Webpack 5中添加了一个新的配置项“cache: { type: “filesystem” }”，它会在全局启用一个文件缓存。该特性仅仅在实验阶段，并且无法自动检测到缓存已经过期。</p><h2 id="9-3-动态链接库与DllPlugin"><a href="#9-3-动态链接库与DllPlugin" class="headerlink" title="9.3  动态链接库与DllPlugin"></a>9.3  动态链接库与DllPlugin</h2><p>动态链接库是早期Windows系统由于受限于当时计算机内存空间较小的问题而出现的一种内存优化方法。当一段相同的子程序被多个程序调用时，为了减少内存消耗，可以将这段子程序存储为一个可执行文件，当被多个程序调用时只在内存中生成和使用同一个实例。</p><br /><p>DllPlugin借鉴了动态链接库的这种思路，将vendor完全拆出来，有自己的一整套Webpack配置并独立打包，在实际工程构建时就不用再对它进行任何处理，直接取用即可。</p><h2 id="9-4-tree-shaking"><a href="#9-4-tree-shaking" class="headerlink" title="9.4  tree shaking"></a>9.4  tree shaking</h2><p>ES6 Module依赖关系的构建是在代码编译时而非运行时。基于这项特性Webpack提供了tree shaking功能，它可以在打包过程中帮助我们检测工程中没有被引用过的模块，这部分代码将永远无法被执行到，因此也被称为“死代码”。Webpack会对这部分代码进行标记，并在资源压缩时将它们从最终的bundle中去掉。</p><br /><p>tree shaking只能对ES6 Module生效。</p><br /><p>如果我们在工程中使用了babel-loader，那么一定要通过配置来禁用它的模块依赖解析。因为如果由babel-loader来做依赖解析，Webpack接收到的都是转化过的CommonJS形式的模块，无法进行tree shaking。</p><h2 id="9-5-使用压缩工具去除死代码"><a href="#9-5-使用压缩工具去除死代码" class="headerlink" title="9.5  使用压缩工具去除死代码"></a>9.5  使用压缩工具去除死代码</h2><p>tree shaking本身只是为死代码添加标记，真正去除死代码是通过压缩工具来进行的。使用terser-webpack-plugin即可。在Webpack 4之后的版本中，将mode设置为production也可以达到相同的效果。</p><br /><br /><h1 id="十、开发环境调优"><a href="#十、开发环境调优" class="headerlink" title="十、开发环境调优"></a>十、开发环境调优</h1><h2 id="10-1-Webpack开发效率插件"><a href="#10-1-Webpack开发效率插件" class="headerlink" title="10.1  Webpack开发效率插件"></a>10.1  Webpack开发效率插件</h2><h3 id="10-1-1-webpack-dashboard"><a href="#10-1-1-webpack-dashboard" class="headerlink" title="10.1.1  webpack-dashboard"></a>10.1.1  webpack-dashboard</h3><p>webpack-dashboard用来更好地展示每次构建结束后在控制台输出的一些打包相关的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dashboard --save-dev</span><br></pre></td></tr></table></figure><pre><code>当前版本webpack-dashboard 3.3.1；</code></pre><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DashboardPlugin=<span class="built_in">require</span>(<span class="string">&#x27;webpack-dashboard/plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> DashboardPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package.json：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   <span class="comment">//&quot;dev&quot;: &quot;set ENV=development&amp;&amp; webpack-dev-server&quot;,</span></span><br><span class="line">   &quot;dev&quot;: &quot;set ENV=development&amp;&amp; webpack-dashboard -- webpack-dev-server&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="10-1-2-webpack-merge"><a href="#10-1-2-webpack-merge" class="headerlink" title="10.1.2  webpack-merge"></a>10.1.2  webpack-merge</h3><p>假设我们的项目有3种不同的配置，分别对应本地环境、测试环境和生产环境。每一个环境对应的配置都不同，但也有一些公共的部分，那么将公共的部分提取出来，创建一个webpack.common.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable indent */</span></span><br><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Analyzer = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="keyword">const</span> DashboardPlugin=<span class="built_in">require</span>(<span class="string">&#x27;webpack-dashboard/plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimize: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, &#123;</span><br><span class="line">                    loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        sourceMap: <span class="literal">true</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="string">&#x27;postcss-loader&#x27;</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">                        publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        cacheDirectory: <span class="literal">true</span>, <span class="comment">//缓存机制, 重复打包未改变的模块防止二次编译</span></span><br><span class="line">                        presets: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="string">&#x27;@babel/env&#x27;</span>, &#123;</span><br><span class="line">                                    modules: <span class="literal">false</span>, <span class="comment">//禁用模块语句的转化, 将ES6 Module的语法交给Webpack本身处理</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            [</span><br><span class="line">                                <span class="string">&#x27;@babel/preset-react&#x27;</span>, &#123;</span><br><span class="line">                                    modules: <span class="literal">false</span>,</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ],</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">                enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定bundle的来源，并具有优先级高于contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">////输出动态HTML</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">&#x27;./public/index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">////生成bundle模块组成结构图</span></span><br><span class="line">        <span class="keyword">new</span> Analyzer(),</span><br><span class="line">        <span class="comment">////更好地展示打包信息</span></span><br><span class="line">        <span class="keyword">new</span> DashboardPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个环境都有一个相应的配置文件，对于生产环境可以专门创建一个webpack.prod.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Object</span>.assign(commonConfig, &#123;</span><br><span class="line">    mode: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在本地测试使用webpack-dev-server，file-loader的publicPath设置为根目录“/”，而执行<code>npm run build</code>打包的图片保存在dist文件夹下，因此需要在webpack.prod.js中重新设置。</p><br /><p>如果通过Object.assign无法准确找到CSS的规则并进行替换，所以必须替换整个module的配置。</p><br /><p>但我们可以通过webpack-merge解决这个问题。它在合并module.rules的过程中会以test属性作为标识符，当发现有相同项出现的时候会以后面的规则覆盖前面的规则，这样就不必添加冗余代码了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-merge --save-dev</span><br></pre></td></tr></table></figure><pre><code>当前版本webpack-merge 5.7.3；</code></pre><p>webpack.prod.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.config.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125;=<span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">    mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">                        publicPath: <span class="string">&#x27;/dist/&#x27;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>webpack.dev.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.config.js&#x27;</span>);</span><br><span class="line"><span class="comment">// webpack-merge v5 (and later)</span></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125;=<span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="comment">// webpack-merge v4 (and earlier)</span></span><br><span class="line"><span class="comment">//const merge = require(&#x27;webpack-merge&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, &#123;</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">                        publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>webpack.common.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">                <span class="comment">////配置在开发和生产环境各自的配置文件中(注释以下内容)</span></span><br><span class="line">                    <span class="comment">//     test: /\.(png|svg|jpg|gif)$/,</span></span><br><span class="line">            <span class="comment">//     use: &#123;</span></span><br><span class="line">            <span class="comment">//         loader: &#x27;file-loader&#x27;,</span></span><br><span class="line">            <span class="comment">//         options: &#123;</span></span><br><span class="line">            <span class="comment">//             name: &#x27;[name].[ext]&#x27;,</span></span><br><span class="line">            <span class="comment">//             publicPath: &#x27;/dist/&#x27;,</span></span><br><span class="line">            <span class="comment">//         &#125;</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>package.json：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config=webpack.prod.config.js&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --config=webpack.dev.config.js&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>分别执行<code>npm run dev</code>或<code>npm run build</code>，进行验证；</p><h3 id="10-1-3-speed-measure-webpack-plugin"><a href="#10-1-3-speed-measure-webpack-plugin" class="headerlink" title="10.1.3  speed-measure-webpack-plugin"></a>10.1.3  speed-measure-webpack-plugin</h3><p>觉得Webpack构建很慢但又不清楚如何优化？可以试试speed-measure-webpack-plugin插件（简称SMP）。SMP可以分析出Webpack整个打包过程中在各个loader和plugin上耗费的时间，这将会有助于找出构建过程中的性能瓶颈。</p><h3 id="10-1-4-size-plugin"><a href="#10-1-4-size-plugin" class="headerlink" title="10.1.4  size-plugin"></a>10.1.4  size-plugin</h3><p>size-plugin这个插件会帮助我们监控资源体积的变化，会输出本次构建的资源体积，以及与上次构建相比体积变化了多少。</p><br /><h2 id="10-2-模块热替换HMR"><a href="#10-2-模块热替换HMR" class="headerlink" title="10.2  模块热替换HMR"></a>10.2  模块热替换HMR</h2><p>一些Web开发框架和工具只要检测到代码改动就会自动重新构建，然后触发网页刷新，这种一般称为live reload。</p><br /><p>Webpack则在live reload的基础上又进一步，可以让代码在网页不刷新的前提下得到最新的改动，甚至不需要重新发起请求就能看到更新后的效果，这就是模块热替换功能（Hot Module Replacement，HMR）。</p><h3 id="10-2-1-开启HMR"><a href="#10-2-1-开启HMR" class="headerlink" title="10.2.1  开启HMR"></a>10.2.1  开启HMR</h3><p>HMR是需要手动开启的，并且有一些必要条件。</p><br /><p>首先我们要确保项目是基于webpack-dev-server或webpack-dev-middle进行开发的，Webpack本身的命令行并不支持HMR。</p><br /><p>调用HMR API有两种方式，一种是手动添加这部分代码；另一种是借助一些现成的工具，如react-hot-loader、vue-loader等。</p><br /><p>===》一种是，手动添加代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;util.js&#x27;</span>;</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br /><p>===》另一种是，第三方提供的HMR，react组件的热更新由react-hot-loader处理</p><br /><h3 id="10-2-2-HMR原理"><a href="#10-2-2-HMR原理" class="headerlink" title="10.2.2  HMR原理"></a>10.2.2  HMR原理</h3><blockquote><p>当你对代码修改并保存后，webpack将会对代码进行重新打包，并将改动的模块发送到浏览器端，浏览器用新的模块替换掉旧的模块，去实现局部更新页面而非整体刷新页面。</p></blockquote><br /><p>在本地开发环境下，浏览器是客户端，webpack-dev-server（WDS）相当于我们的服务端。HMR的核心就是客户端从服务端拉取更新后的资源（准确地说，HMR拉取的不是整个资源文件，而是chunk diff，即chunk需要更新的部分）</p><br /><p>第一步，浏览器什么时候去拉取这些更新，这需要WDS对本地源文件进行监听。实际上WDS与浏览器之间维护了一个websocket，当本地资源发生变化时WDS会向浏览器推送更新事件，并带上这次构建的hash，让客户端与上一次资源进行比对。通过hash的比对可以防止冗余更新的出现。</p><br /><p>下一步，要知道拉取什么。在刚刚的websocket中，客户端已经知道新的构建结果和当前有差别，就会向WDS发起一个请求（这个请求名字为[hash].hot-update）来获取更新文件的列表，即哪些模块有改动。</p><br /><br /><h1 id="十一、其他JavaScript打包工具"><a href="#十一、其他JavaScript打包工具" class="headerlink" title="十一、其他JavaScript打包工具"></a>十一、其他JavaScript打包工具</h1><h2 id="11-1-Rollup"><a href="#11-1-Rollup" class="headerlink" title="11.1  Rollup"></a>11.1  Rollup</h2><p>如果当前的项目需求仅仅是打包Javascript，Rollup是我们的第一选择。</p><br /><h2 id="11-2-Parcel"><a href="#11-2-Parcel" class="headerlink" title="11.2  Parcel"></a>11.2  Parcel</h2><br /><br /><h1 id="十二、-附加-自动清除上一次打包的文件"><a href="#十二、-附加-自动清除上一次打包的文件" class="headerlink" title="十二、(附加)自动清除上一次打包的文件"></a>十二、(附加)自动清除上一次打包的文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><pre><code>当前版本clean-webpack-plugin 3.0.0；</code></pre><p>webpack.common.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npm run build</code>，验证结果，出现以下两个问题：</p><br /><p>Q1：clean-webpack-plugin: options.output.path not defined. Plugin disabled…打包清除不了之前的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.common.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">        path: path.resolve(process.cwd(), <span class="string">&#x27;dist&#x27;</span>), <span class="comment">//必须配置这行代码，否则无法删除/dist/目录中的文件(写法不止一种)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br /><p>Q2：Error: EPERM: operation not permitted, lstat ‘D:\LearnCode\learn_react_webpack\dist\images\hexo-deploy.png’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.common.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">        path: path.resolve(process.cwd(), <span class="string">&#x27;dist&#x27;</span>), <span class="comment">//必须配置这行代码，否则无法删除/dist/目录中的文件(写法不止一种)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(&#123;</span><br><span class="line">        cleanOnceBeforeBuildPatterns: [<span class="string">&#x27;./dist/*&#x27;</span>] <span class="comment">//配置./dist/*或./dist/images/*,测试无差别(20210302)</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br /><br /><h1 id="十三、代码备份"><a href="#十三、代码备份" class="headerlink" title="十三、代码备份"></a>十三、代码备份</h1><p>github链接地址：<a href="https://github.com/YuliaScott/learn_react_webpack">https://github.com/YuliaScott/learn_react_webpack</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载压缩包或克隆项目</span><br><span class="line">解压</span><br><span class="line">执行 npm install（安装项目包文件）</span><br><span class="line">执行 npm run dev 或 npm run build</span><br></pre></td></tr></table></figure><br /><p>（第二部分完）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于《Webpack实战 入门、进阶与调优》学习Webpack，搭建学习demo，共两个部分，本文是第二部分。&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;h1 id=&quot;—七、代码分片&quot;&gt;&lt;a href=&quot;#—七、代码分片&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="技术读物" scheme="https://yuliascott.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/"/>
    
    
    <category term="React" scheme="https://yuliascott.github.io/blog/tags/React/"/>
    
    <category term="Webpack" scheme="https://yuliascott.github.io/blog/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack实战(1)-居玉皓著</title>
    <link href="https://yuliascott.github.io/blog/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/Webpack%E5%AE%9E%E6%88%98(1)-%E5%B1%85%E7%8E%89%E7%9A%93%E8%91%97/"/>
    <id>https://yuliascott.github.io/blog/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/Webpack%E5%AE%9E%E6%88%98(1)-%E5%B1%85%E7%8E%89%E7%9A%93%E8%91%97/</id>
    <published>2021-03-12T11:06:48.000Z</published>
    <updated>2021-03-13T03:19:22.943Z</updated>
    
    <content type="html"><![CDATA[<p>基于《Webpack实战 入门、进阶与调优》学习Webpack，搭建学习demo，共两个部分，本文是第一部分。</p><br /><br /><h1 id="一、Webpack简介"><a href="#一、Webpack简介" class="headerlink" title="一、Webpack简介"></a>一、Webpack简介</h1><p>Webpack 核心概念：</p><ul><li>Entry（入口）：Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入</li><li>Output（出口）：指示 webpack 如何去输出、以及在哪里输出</li><li>Module（模块）：在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块</li><li>Chunk（代码块）：一个 Chunk 由多个模块组合而成，用于代码合并与分割</li><li>Loader（模块转换器）：用于把模块原内容按照需求转换成新内容</li><li>Plugin（扩展插件）：在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件，并改变输出结果</li></ul><br /><br /><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><h2 id="2-1-创建工程目录learn-react-webpack"><a href="#2-1-创建工程目录learn-react-webpack" class="headerlink" title="2.1  创建工程目录learn_react_webpack"></a>2.1  创建工程目录learn_react_webpack</h2><br /><h2 id="2-2-进入该目录，执行npm初始化命令"><a href="#2-2-进入该目录，执行npm初始化命令" class="headerlink" title="2.2  进入该目录，执行npm初始化命令"></a>2.2  进入该目录，执行npm初始化命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init  <span class="comment">#若使用yarn，则yarn init</span></span><br></pre></td></tr></table></figure><pre><code>输入项目基本信息，最后在目录中生成了一个package.json文件，它相当于npm项目的说明书，里面记录了项目名称、版本、仓库地址等信息</code></pre><br /><h2 id="2-3-执行安装webpack的命令"><a href="#2-3-执行安装webpack的命令" class="headerlink" title="2.3  执行安装webpack的命令"></a>2.3  执行安装webpack的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><pre><code>1. webpack是核心模块，webpack-cli是命令行工具；2. 当前安装webpack 5.23.0，webpack-cli 3.3.12；</code></pre><br /><h2 id="2-4-打包第一个应用"><a href="#2-4-打包第一个应用" class="headerlink" title="2.4  打包第一个应用"></a>2.4  打包第一个应用</h2><h3 id="2-4-1-在工程目录下添加文件"><a href="#2-4-1-在工程目录下添加文件" class="headerlink" title="2.4.1  在工程目录下添加文件"></a>2.4.1  在工程目录下添加文件</h3><p>文件目录如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">learn_react_webpack/</span><br><span class="line">dist/</span><br><span class="line">    bundle.js</span><br><span class="line">node_modules/</span><br><span class="line">  public/</span><br><span class="line">    index.html</span><br><span class="line">  src/</span><br><span class="line">    App.js</span><br><span class="line">    index.js</span><br><span class="line">  package.json</span><br></pre></td></tr></table></figure><p>App.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;Hello world!!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;This is index file.&lt;br/&gt;&#x27;</span>);</span><br><span class="line">App();</span><br></pre></td></tr></table></figure><p>index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn react webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-使用npm-scripts"><a href="#2-4-2-使用npm-scripts" class="headerlink" title="2.4.2  使用npm scripts"></a>2.4.2  使用npm scripts</h3><p>编辑工程中的package.json文件，添加脚本命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;:&quot;webpack --entry=./src/index.js --output-filename=bundle.js --mode=development&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><pre><code>1. entry：资源打包入口，webpack默认的源代码入口就是src/index.js，因此可以省略entry配置2. output-filename：输出资源名3. mode：打包模式，development、production、none三种模式</code></pre><h3 id="2-4-3-执行打包"><a href="#2-4-3-执行打包" class="headerlink" title="2.4.3  执行打包"></a>2.4.3  执行打包</h3><p>输入<code>npm build</code>，打开index.html页面验证</p><h3 id="2-4-4-使用配置文件"><a href="#2-4-4-使用配置文件" class="headerlink" title="2.4.4  使用配置文件"></a>2.4.4  使用配置文件</h3><p>使用<code>npx webpack -h</code>，查看webpack的配置项以及相对应的命令行参数。</p><br /><p>当项目需要越来越多的配置时，将这些命令行参数改为对象的形式专门存放在一个配置文件里。Webpack的默认配置文件为webpack.config.js。</p><br /><p>1）在工程根目录下创建webpack.config.js，添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode:<span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）去掉package.json中配置的打包参数：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;:&quot;webpack&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>3）为了验证效果，修改App.js内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;using a config file!!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）执行<code>npm run build</code>，Webpack就会预先读取webpack.config.js，然后进行打包，最后打开index.html进行验证</p><h3 id="2-4-5-webpack-dev-server"><a href="#2-4-5-webpack-dev-server" class="headerlink" title="2.4.5  webpack-dev-server"></a>2.4.5  webpack-dev-server</h3><p>每次修改完源代码都要执行npm run build更新bundle.js，然后刷新页面才能生效，有没有简便的方法呢？</p><p>本地开发工具——webpack-dev-server，可以提高开发调试效率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><p>1）在package.json中添加dev命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">  &quot;dev&quot;:&quot;webpack-dev-server&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>2）编辑webpack.config.js文件，配置webpack-dev-server</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定 bundle 的来源，并具有优先级高于 contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）修改App.js内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;using webpack-dev-server!!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）修改index.html内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn react webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> //如果设置了publicPath，要以publicPath作为路径</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5）执行<code>npm run dev</code>，打开http://localhost:8080/</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/npmRunDev.png" alt="终端执行结果"></p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/npmRunDevStartIndex.png" alt="启动页面"></p><p>webpack-dev-server配置时遇到的问题：</p><p>Q1：Cannot get /</p><p>执行<code>npm run dev</code>后，页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就会显示cannot get /，因此，contentBase设置的值是index.html所在的文件目录。</p><br /><p>Q2：没有展示页面内容，只显示了一个目录视图</p><p>如果contentBase参数设置不对的话，会展示一个以该参数指定目录作为根目录的路由窗口，contentBase设置到为index.html。如果设置了publicPath，index.html中的src也要以publicPath作为路径。</p><br /><p>=====》由于文件直接打包在/dist文件夹根目录下，因此publicPath不用设置，最终配置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/webpackDevServerWebpackConfig.png" alt="webpack.config.js配置"></p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/webpackDevServerIndex.png" alt="index.html页面配置"></p><br /><br /><h1 id="三、类型模块"><a href="#三、类型模块" class="headerlink" title="三、类型模块"></a>三、类型模块</h1><p>CommonJS</p><p>ES6 Module</p><p>AMD</p><p>UMD</p><br /><h2 id="3-1-CommonJS和ES6-Module形式"><a href="#3-1-CommonJS和ES6-Module形式" class="headerlink" title="3.1  CommonJS和ES6 Module形式"></a>3.1  CommonJS和ES6 Module形式</h2><h3 id="3-1-1-模块"><a href="#3-1-1-模块" class="headerlink" title="3.1.1  模块"></a>3.1.1  模块</h3><ul><li>CommonJS：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;app.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;index.js&#x27;</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./app.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">//index.js, app.js中的变量声明不会影响index.js, 每个模块拥有各自的作用域</span></span><br></pre></td></tr></table></figure><ul><li>ES6 Module：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">&#x27;app.js&#x27;</span>,</span><br><span class="line">  add:<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&#x27;./app.js&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> sum=app.add(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//5</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2-导入"><a href="#3-1-2-导入" class="headerlink" title="3.1.2  导入"></a>3.1.2  导入</h3><ul><li>CommonJS：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="built_in">require</span>(<span class="string">&#x27;./app.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sum=app.add(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//5</span></span><br></pre></td></tr></table></figure><pre><code>注意：当我们require一个模块时会有两种情况：1. require的模块是第一次被加载。这时会首先执行该模块，然后导出内容；2. require的模块曾被加载过。这时该模块的代码不会再次执行，而是直接导出上次执行后得到的结果</code></pre><ul><li>ES6 Module：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">const</span> name=<span class="string">&#x27;app.js&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> add=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> a + b &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; name , add &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,add <span class="keyword">as</span> calculateSum&#125; <span class="keyword">from</span> <span class="string">&#x27;./app.js&#x27;</span>;</span><br><span class="line">calculateSum(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="3-1-3-导出"><a href="#3-1-3-导出" class="headerlink" title="3.1.3  导出"></a>3.1.3  导出</h3><ul><li>CommonJS：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  name:<span class="string">&#x27;app.js&#x27;</span>,</span><br><span class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.name=<span class="string">&#x27;app.js&#x27;</span>;</span><br><span class="line"><span class="built_in">exports</span>.add=<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>注意：module.exports 和 exports 不能混用</code></pre><ul><li>ES6 Module：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name=<span class="string">&#x27;app.js&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a + b&#125;;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name=<span class="string">&#x27;app.js&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> add=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a + b&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; name,add <span class="keyword">as</span> getSum &#125;;</span><br></pre></td></tr></table></figure><h2 id="3-2-CommonJS和ES6-Module区别"><a href="#3-2-CommonJS和ES6-Module区别" class="headerlink" title="3.2  CommonJS和ES6 Module区别"></a>3.2  CommonJS和ES6 Module区别</h2><h3 id="3-2-1-动态与静态"><a href="#3-2-1-动态与静态" class="headerlink" title="3.2.1  动态与静态"></a>3.2.1  动态与静态</h3><p>CommonJS和ES6 Module最本质的区别在于前者对模块依赖的解决是“动态的”，而后者是“静态的”。这里的“动态”是模块依赖关系的建立发生在代码运行阶段；而“静态”则是模块依赖关系的建立发生在代码编译阶段。  </p><br /><p>require的模块路径可以动态指定，支持传入一个表达式，甚至通过if语句判断是否加载某个模块，因此CommonJS模块被执行前，没办法确定明确的依赖关系。</p><br /><p>ES6 Module的导入、导出语句都是声明式的，不支持导入的路径是一个表达式，并且导入、导出语句必须位于模块的顶层作用域，相比于CommonJS具备以下优势：</p><ul><li>死代码检测和排除。可以用静态分析工具检测出哪些模块没有被调用过。</li><li>模块变量类型检查。确保模块之间传递的值或接口类型是正确的。</li><li>编译器优化。在CommonJS等动态模块系统中，本质上导入的都是一个对象，而ES6 Module支持直接导入变量，减少引用层级。</li></ul><br /><h3 id="3-2-2-值拷贝与动态映射"><a href="#3-2-2-值拷贝与动态映射" class="headerlink" title="3.2.2  值拷贝与动态映射"></a>3.2.2  值拷贝与动态映射</h3><p>CommonJS是一份导出值的拷贝；ES6 Module则是值的动态映射，这个映射是只读的。</p><ul><li>CommonJS：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    count: count,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">var</span> count=<span class="built_in">require</span>(<span class="string">&#x27;./App.js&#x27;</span>).count;</span><br><span class="line"><span class="keyword">var</span> add=<span class="built_in">require</span>(<span class="string">&#x27;./App.js&#x27;</span>).add;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">//0，对App.js中count值的拷贝</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">//0，App.js中变量值的改变不会对这里的拷贝值有影响</span></span><br><span class="line"></span><br><span class="line">count+=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">//1，拷贝值可以更改</span></span><br></pre></td></tr></table></figure><p>ES6 Module：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; count, add &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; count, add &#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">//0, 对app.js中count值的映射</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">//1, 实时反映app.js中count值的变化</span></span><br><span class="line"></span><br><span class="line">count += <span class="number">1</span>; <span class="comment">//Uncaught TypeError: Cannot set property count of #&lt;Object&gt; which has only a getter</span></span><br></pre></td></tr></table></figure><h3 id="2-3-循环依赖"><a href="#2-3-循环依赖" class="headerlink" title="2.3  循环依赖"></a>2.3  循环依赖</h3><br /><h2 id="3-3-AMD（异步模块定义）"><a href="#3-3-AMD（异步模块定义）" class="headerlink" title="3.3  AMD（异步模块定义）"></a>3.3  AMD（异步模块定义）</h2><p>使用define函数定义模块，接受3个参数：</p><ul><li>第1个参数当前模块的id，相当于模块名；</li><li>第2个参数是当前模块的依赖，如getSum模块需要引入app模块作为依赖；</li><li>第3个参数用来描述模块的导出值，可以是函数或对象。如果是函数则导出的是函数的返回值；如果是对象则直接导出对象本身。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&#x27;getSum&#x27;</span>,[<span class="string">&#x27;app&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">math</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sum:&#x27;</span>+app.add(a,b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-4-UMD（通用模块标准）"><a href="#3-4-UMD（通用模块标准）" class="headerlink" title="3.4  UMD（通用模块标准）"></a>3.4  UMD（通用模块标准）</h2><br /><br /><h1 id="四、资源输入输出"><a href="#四、资源输入输出" class="headerlink" title="四、资源输入输出"></a>四、资源输入输出</h1><h2 id="4-1-资源处理流程"><a href="#4-1-资源处理流程" class="headerlink" title="4.1  资源处理流程"></a>4.1  资源处理流程</h2><p>Webpack会从入口文件开始检索，将具有依赖关系的模块生成一棵依赖树，最终得到一个chunk。由这个chunk得到的打包产物称之为bundle（束）。entry、chunk、bundle的关系如图：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/output.png" alt="资源输出关系图"></p><p>在工程中可以定义多个入口，每个入口都会产生一个结果资源，entry和bundle存在着对应关系：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/entryBundle.png" alt="entry和bundle关系"></p><h2 id="4-2-配置资源"><a href="#4-2-配置资源" class="headerlink" title="4.2  配置资源"></a>4.2  配置资源</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    context:path.join(__dirname,<span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">  entry:&#123;</span><br><span class="line">    app:<span class="string">&#x27;app.js&#x27;</span>,</span><br><span class="line">    page:<span class="string">&#x27;page.js&#x27;</span>, <span class="comment">//演示多入口, 每个页面都有一个独立的bundle</span></span><br><span class="line">    vendor:[<span class="string">&#x27;react&#x27;</span>,<span class="string">&#x27;react-dom&#x27;</span>,<span class="string">&#x27;react-router&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:<span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    path:path.join(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    publicPath:<span class="string">&#x27;/assets/&#x27;</span>,</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>配置资源入口：1. context：资源入口的路径前缀；可以省略，默认值为当前工程的根目录；2. entry：支持多种形式：字符串、数组、对象、函数；3. vendor：一般指的是工程所使用的库、框架等第三方模块集中打包而产生的bundle；配置资源出口：1. filename：输出资源的文件名，形式为字符串，不仅可以是bundle的名字，还可以是一个相对路径。路径中的目录不存在，Webpack会自动创建该目录；模板变量支持[hash]、[chunkhash]、[id]、[query]；2. path：指定资源输出的位置，Webpack 4之后，output.path默认为dist目录；3. publicPath：由JS或CSS所请求的间接资源路径；</code></pre><br /><br /><h1 id="五、预处理器"><a href="#五、预处理器" class="headerlink" title="五、预处理器"></a>五、预处理器</h1><p>Webpack本身只认识JavaScript，对于其他类型的资源(CSS、图片、字体等)必须预先定义一个或多个loader对其进行转译，输出为Webpack能够接收的形式再继续进行，因此loader实际上是一个预处理的工作。</p><br /><h2 id="5-1-css-loader：处理CSS的各类加载语法"><a href="#5-1-css-loader：处理CSS的各类加载语法" class="headerlink" title="5.1  css-loader：处理CSS的各类加载语法"></a>5.1  css-loader：处理CSS的各类加载语法</h2><p>将css-loader添加到工程中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader</span><br></pre></td></tr></table></figure><pre><code>1. css-loader的作用仅仅是处理CSS的各种加载语法（@import和url()函数等），如果要使样式起作用还需要style-loader将样式插入页面；2. 当前安装css-loader 5.0.2，style-loader 2.0.0；</code></pre><p>App.css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;div class=&quot;app&quot;&gt;Hello world!!&lt;/div&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;This is index file.&lt;br/&gt;&#x27;</span>);</span><br><span class="line">App();</span><br></pre></td></tr></table></figure><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定 bundle 的来源，并具有优先级高于 contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>1. css-loader与style-loader通常是配合在一起使用，style-loader用来将样式字符串包装成style标签插入到页面；2. 因为Webpack打包时是按照数组**从后往前**的顺序将资源交给loader处理的，因此style-loader加到css-loader前面；3. exclude和include同时存在时，exclude的优先级更高；（*[*配置参考*](https://survivejs.com/webpack/loading/loader-definitions/)*）4. resource和issuer，resource是被加载模块，issuer是加载者；5. enforce用来指定一个loader的种类，只接收“pre”和“post”两种字符串类型的值；</code></pre><br /><p>————————————————————————————————————————————————</p><p>eslint：开源的JavaScript的linting工具，用来检查代码质量问题和统一代码风格。</p><br /><p>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint eslint-loader --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">yarn add eslint eslint-loader --dev</span><br></pre></td></tr></table></figure><pre><code>当前版本eslint 7.20.0，eslint-loader 4.0.2，eslint-plugin-react 7.22.0；</code></pre><p>初始化命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx eslint --init</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">yarn run eslint --init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/eslintrcJson.png" alt="生成eslintrc.json文件"></p><p>执行完成（这里选择当前项目不使用typescript），选择json格式，生成.eslintrc.json文件；</p><p>.eslintrc.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;es2021&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">        <span class="string">&quot;plugin:react/recommended&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;jsx&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;ecmaVersion&quot;</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;react&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;indent&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="number">4</span>] <span class="comment">//打开规则作为一个错误; 首字母缩进4个字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">let</span> ENV = process.env.ENV;</span><br><span class="line"><span class="keyword">let</span> isProd = ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: isProd ? <span class="string">&#x27;bundle@[chunkhash].js&#x27;</span> : <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: ENV,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">            enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定bundle的来源，并具有优先级高于contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;div class=&quot;app&quot;&gt;Hello world!!&lt;/div&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br /><p>————————————————————————————————————————————————</p><p>设置的规则是“首字母缩进4个字符”，故意删除App.js中的首字母缩进，有两种方式解决：</p><p>===》VS Code安装ESLint插件，快捷键<code>shift+Alt+f</code>格式化；</p><p>===》eslint –fix命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;esfix&quot;:&quot;yarn eslint --fix --ext .js ./src&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>执行<code>yarn run esfix</code>，查看App.js代码格式是否修复</p><br /><h2 id="5-2-babel-loader：处理ES6-编译为ES5"><a href="#5-2-babel-loader：处理ES6-编译为ES5" class="headerlink" title="5.2  babel-loader：处理ES6+编译为ES5"></a>5.2  babel-loader：处理ES6+编译为ES5</h2><p>安装react命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom --save</span><br></pre></td></tr></table></figure><p>index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn react webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;webapp&quot;</span>&gt;</span></span><br><span class="line">        hello webpack</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> hexoimg <span class="keyword">from</span> <span class="string">&#x27;./images/hexo-deploy.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &lt;div&gt;Hello React!&lt;/div&gt;</span><br><span class="line">        &lt;img src=&#123;hexoimg&#125; /&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;webapp&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>App.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">                这是App组件！</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，出现错误：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/noBabel.png" alt="没有引用babel终端显示结果"></p><p>因为使用了react，react是使用jsx语法实现的，而jsx不能直接被浏览器识别和执行，所以这里需要引入Babel库进行转码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader @babel/core @babel/preset-env @babel/preset-react</span><br></pre></td></tr></table></figure><pre><code>1. 当前版本babel-loader 8.2.2，@babel/core 7.13.1，@babel/preset-env 7.13.5，@babel/preset-react 7.12.13；2. 各个模块的作用：babel-loader：它会使Babel与Webpack协同工作的模块；@babel/core：它是Babel编译器的核心模块；@babel/preset-env：它是Babel官方推荐的预置器，可根据用户设置的目标环境自动添加所需的插件和补丁来编译ES6+代码；</code></pre><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">let</span> ENV = process.env.ENV;</span><br><span class="line"><span class="keyword">let</span> isProd = ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: isProd ? <span class="string">&#x27;bundle@[chunkhash].js&#x27;</span> : <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: ENV,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">                    publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    cacheDirectory: <span class="literal">true</span>, <span class="comment">//缓存机制, 重复打包未改变的模块防止二次编译</span></span><br><span class="line">                    presets: [[</span><br><span class="line">                        <span class="string">&#x27;@babel/env&#x27;</span>, &#123;</span><br><span class="line">                            modules: <span class="literal">false</span>, <span class="comment">//禁用模块语句的转化, 将ES6 Module的语法交给Webpack本身处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ], [</span><br><span class="line">                        <span class="string">&#x27;@babel/preset-react&#x27;</span>, &#123;</span><br><span class="line">                            modules: <span class="literal">false</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">            enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定bundle的来源，并具有优先级高于contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，验证结果：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/hasBabelStartIndex.png" alt="引用babel页面结果"></p><h2 id="5-3-file-loader：打包文件类型的资源，并返回其publicPath"><a href="#5-3-file-loader：打包文件类型的资源，并返回其publicPath" class="headerlink" title="5.3  file-loader：打包文件类型的资源，并返回其publicPath"></a>5.3  file-loader：打包文件类型的资源，并返回其publicPath</h2><p>1）安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader</span><br></pre></td></tr></table></figure><pre><code>当前版本file-loader 6.2.0；</code></pre><p>文件目录结构：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">learn_react_webpack/</span><br><span class="line">dist/</span><br><span class="line">    bundle.js</span><br><span class="line">node_modules/</span><br><span class="line">  public/</span><br><span class="line">    index.html</span><br><span class="line">  src/</span><br><span class="line">        images/</span><br><span class="line">            hexo-deploy.png</span><br><span class="line">    App.js</span><br><span class="line">    index.js</span><br><span class="line">  package.json</span><br></pre></td></tr></table></figure><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> hexoimg <span class="keyword">from</span> <span class="string">&#x27;./images/hexo-deploy.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;This is index file.&lt;br/&gt;&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;img src=&#x27;</span> + hexoimg + <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">App();</span><br></pre></td></tr></table></figure><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定 bundle 的来源，并具有优先级高于 contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）执行<code>npm run dev</code>，打开index.html验证结果；</p><p>以上配置没有指定output.publicPath，因此打印出的图片路径只是文件名，默认为文件的hash值加上文件后缀。</p><br /><p>===》添加output.publicPath：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">let</span> ENV = process.env.ENV;</span><br><span class="line"><span class="keyword">let</span> isProd = ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: isProd ? <span class="string">&#x27;bundle@[chunkhash].js&#x27;</span> : <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">        publicPath: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mode: ENV,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">            enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定bundle的来源，并具有优先级高于contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> hexoimg <span class="keyword">from</span> <span class="string">&#x27;./images/hexo-deploy.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;This is index file.&lt;br/&gt;&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;img src=&#x27;</span> + hexoimg + <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hexoimg);</span><br><span class="line">App();</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，此时图片路径变成以下形式：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/npmFileloader.png" alt="引用file-loader"></p><p>===》file-loader支持配置文件名以及publicPath：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rule:[</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">    use:&#123;</span><br><span class="line">        loader:<span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">      options:&#123;</span><br><span class="line">        name:<span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">        publicPath:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> hexoimg <span class="keyword">from</span> <span class="string">&#x27;./images/hexo-deploy.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;This is index file.&lt;br/&gt;&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;img src=&#x27;</span> + hexoimg + <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hexoimg);</span><br><span class="line">App();</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，此时图片路径变成以下形式：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/fileloaderUseFileName.png" alt="引用file-loader输出保留文件名"></p><h2 id="5-4-url-loader：作用与file-loader类似"><a href="#5-4-url-loader：作用与file-loader类似" class="headerlink" title="5.4  url-loader：作用与file-loader类似"></a>5.4  url-loader：作用与file-loader类似</h2><p>不同在于设置一个文件大小的阈值，当大于该阈值时与file-loader一样返回publicPath，而小于该阈值时返回文件base64形式编码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader</span><br></pre></td></tr></table></figure><pre><code>当前版本url-loader 4.1.1；</code></pre><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">let</span> ENV = process.env.ENV;</span><br><span class="line"><span class="keyword">let</span> isProd = ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: isProd ? <span class="string">&#x27;bundle@[chunkhash].js&#x27;</span> : <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: ENV,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">            use:&#123;</span><br><span class="line">                loader:<span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    limit:<span class="number">102400</span>,</span><br><span class="line">                    name:<span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">                    publicPath:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">            enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定bundle的来源，并具有优先级高于contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> hexoimg <span class="keyword">from</span> <span class="string">&#x27;./images/hexo-deploy.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;This is index file.&lt;br/&gt;&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;img src=&#x27;</span> + hexoimg + <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hexoimg);</span><br><span class="line">App();</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，此时图片路径变成以下形式：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/npmUrlloader.png" alt="引用url-loader"></p><h2 id="5-5-自定义loader"><a href="#5-5-自定义loader" class="headerlink" title="5.5  自定义loader"></a>5.5  自定义loader</h2><p>比如我们将实现一个loader，它会为所有JS文件启用严格模式，也就是说它会在文件头部加上如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br></pre></td></tr></table></figure><p>在开发一个loader时，我们可以借助npm/yarn的软链功能进行本地调试（可以考虑发布到npm等）。下面初始化这个loader并配置到工程中。</p><p>创建一个force-strict-loader目录，然后在该目录下执行npm初始化命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>接着创建index.js，也就是loader的主体：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> useStrictPrefix = <span class="string">&#x27;\&#x27;use strict\&#x27;;\n\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> useStrictPrefix + content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在可以在Webpack工程中安装并使用这个loader：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;path-to-loader&gt;/force-strict-loader</span><br></pre></td></tr></table></figure><pre><code>在Webpack工程目录下使用相对路径安装，会在项目的node_modules中创建一个指向实际force-strict-loader目录的软链，也就是之后可以随时修改loader源码并且不需要重复安装。</code></pre><p>修改Webpack配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        test:<span class="string">&#x27;/\.js$/&#x27;</span>,</span><br><span class="line">      use:<span class="string">&#x27;force-strict-loader&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个loader设置为对所有JS文件生效。此时对该工程进行打包，可以看到JS文件的头部都已经加上了启用严格模式的语句。</p><br /><br /><h1 id="六、样式处理"><a href="#六、样式处理" class="headerlink" title="六、样式处理"></a>六、样式处理</h1><h2 id="6-1-分离样式文件"><a href="#6-1-分离样式文件" class="headerlink" title="6.1  分离样式文件"></a>6.1  分离样式文件</h2><p>使用style-loader和css-loader打包JS引用CSS的样式，如果使用style标签方式引入样式，如何输出单独的CSS文件呢？</p><ul><li>extract-text-webpack-plugin：适用于Webpack 4之前版本</li><li>mini-css-extract-plugin：适用于Webpack 4及以上版本</li></ul><br /><h2 id="6-2-样式预处理"><a href="#6-2-样式预处理" class="headerlink" title="6.2  样式预处理"></a>6.2  样式预处理</h2><p>样式预编译语言：</p><p>SCSS</p><p>Less</p><br /><h2 id="6-3-PostCSS"><a href="#6-3-PostCSS" class="headerlink" title="6.3  PostCSS"></a>6.3  PostCSS</h2><p>PostCSS是一个用JS工具和插件转换 CSS 代码的工具。它的工作模式是接收样式源代码并交由编译插件处理，最后输出CSS。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-loader</span><br></pre></td></tr></table></figure><pre><code>当前版本postcss-loader 5.0.0；</code></pre><p>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">let</span> ENV = process.env.ENV;</span><br><span class="line"><span class="keyword">let</span> isProd = ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: isProd ? <span class="string">&#x27;bundle@[chunkhash].js&#x27;</span> : <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: ENV,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;postcss-loader&#x27;</span>],</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//node_modules中的模块不会执行这条规则 #/src\/pages/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">                    publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    cacheDirectory: <span class="literal">true</span>, <span class="comment">//缓存机制, 重复打包未改变的模块防止二次编译</span></span><br><span class="line">                    presets: [[</span><br><span class="line">                        <span class="string">&#x27;@babel/env&#x27;</span>, &#123;</span><br><span class="line">                            modules: <span class="literal">false</span>, <span class="comment">//禁用模块语句的转化, 将ES6 Module的语法交给Webpack本身处理</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ], [</span><br><span class="line">                        <span class="string">&#x27;@babel/preset-react&#x27;</span>, &#123;</span><br><span class="line">                            modules: <span class="literal">false</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">            enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// publicPath: &#x27;/&#x27;, //用于确定bundle的来源，并具有优先级高于contentBase</span></span><br><span class="line">        contentBase: <span class="string">&#x27;./public&#x27;</span>, <span class="comment">//页面打开的url是以devServer中的contentBase作为当前查询目录，只要文档不在contentBase所指定的目录中，就只会显示cannot get</span></span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目的根目录下创建一个postcss.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-3-1-Autoprefixer自动前缀"><a href="#6-3-1-Autoprefixer自动前缀" class="headerlink" title="6.3.1  Autoprefixer自动前缀"></a>6.3.1  Autoprefixer自动前缀</h3><p>根据caniuse.com上的数据，自动决定是否要为某一特性添加厂商前缀，由开发者为其指定支持浏览器的范围。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install autoprefixer</span><br></pre></td></tr></table></figure><pre><code>当前版本autoprefixer 10.2.4；</code></pre><p>在postcss.config.js中添加autoprefixer：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">            grid: <span class="literal">true</span>,</span><br><span class="line">            overrideBrowserslist: [</span><br><span class="line">                <span class="string">&#x27;&gt;1%&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;last 3 versions&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;android 4.2&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;ie 8&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>App.css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.app</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">                    这是App组件！</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，进行验证：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/npmAutoprefixer.png" alt="引用autoprefixer"></p><pre><code>当前测试浏览器 Chrome 88.0.4324.182（正式版本） （64 位）</code></pre><h3 id="6-3-2-stylelint质量检查工具"><a href="#6-3-2-stylelint质量检查工具" class="headerlink" title="6.3.2  stylelint质量检查工具"></a>6.3.2  stylelint质量检查工具</h3><p>stylelint是一个CSS的质量检测工具，就像eslint一样，为其添加各种规则，来统一项目的代码风格，确保代码质量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install stylelint</span><br></pre></td></tr></table></figure><pre><code>当前版本stylelint 13.11.0；</code></pre><p>postcss.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stylelint = <span class="built_in">require</span>(<span class="string">&#x27;stylelint&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">            grid: <span class="literal">true</span>,</span><br><span class="line">            overrideBrowserslist: [</span><br><span class="line">                <span class="string">&#x27;&gt;1%&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;last 3 versions&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;android 4.2&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;ie 8&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;),</span><br><span class="line">        stylelint(&#123;</span><br><span class="line">            config: &#123;</span><br><span class="line">                rules: &#123;</span><br><span class="line">                    <span class="string">&#x27;declaration-no-important&#x27;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>App.css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.app</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">                    这是App组件！</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，进行验证：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/npmStylelint.png" alt="引用stylelint终端显示结果"></p><h3 id="6-3-3-CSSNext"><a href="#6-3-3-CSSNext" class="headerlink" title="6.3.3  CSSNext"></a>6.3.3  CSSNext</h3><p>PostCSS与CSSNext结合使用，在应用中使用最新的CSS语法特性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-cssnext</span><br></pre></td></tr></table></figure><pre><code>当前版本postcss-cssnext 3.1.0；</code></pre><p>postcss.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stylelint = <span class="built_in">require</span>(<span class="string">&#x27;stylelint&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> postcssCssnext=<span class="built_in">require</span>(<span class="string">&#x27;postcss-cssnext&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">            grid: <span class="literal">true</span>,</span><br><span class="line">            overrideBrowserslist: [</span><br><span class="line">                <span class="string">&#x27;&gt;1%&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;last 3 versions&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;android 4.2&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;ie 8&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;),</span><br><span class="line">        stylelint(&#123;</span><br><span class="line">            config: &#123;</span><br><span class="line">                rules: &#123;</span><br><span class="line">                    <span class="string">&#x27;declaration-no-important&#x27;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        postcssCssnext(&#123;</span><br><span class="line">            overrideBrowserslist: [</span><br><span class="line">                <span class="string">&#x27;&gt;1%&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;last 2 versions&#x27;</span>,</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>App.css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--fontFamily</span>: <span class="string">&quot;Times New Roman&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.app</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red; <span class="comment">/* !important; */</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--fontFamily);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>，验证结果：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/npmCSSNext.png" alt="引用CSSNext"></p><br /><p>备注：执行<code>npm run dev</code>，终端显示：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/cssnextautoprefixer.png" alt="cssnext与autoprefixer冲突"></p><p>因此注释postcss.config.js中的autoprefixer配置，重新执行：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/annotationAutoprefixer.png" alt="webpack.config注释autoprefixer配置"></p><h2 id="6-4-CSS-Modules"><a href="#6-4-CSS-Modules" class="headerlink" title="6.4  CSS Modules"></a>6.4  CSS Modules</h2><p>CSS Modules将CSS模块化：</p><ul><li>每个CSS文件中的样式都拥有单独的作用域，不会和外界发生命名冲突；</li><li>对CSS进行依赖管理，可以通过相对路径引入CSS文件；</li><li>可以通过composes轻松复用其他CSS模块；</li></ul><p>使用CSS ModulesCSS文件会导出一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//style.css</span></span><br><span class="line">.title&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./style.css&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;h1 class=`$&#123;styles.title&#125;`&gt;my webpack app.&lt;/h1&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><br /><p>（第一部分完）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于《Webpack实战 入门、进阶与调优》学习Webpack，搭建学习demo，共两个部分，本文是第一部分。&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;h1 id=&quot;一、Webpack简介&quot;&gt;&lt;a href=&quot;#一、Webpack简介&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="技术读物" scheme="https://yuliascott.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/"/>
    
    
    <category term="React" scheme="https://yuliascott.github.io/blog/tags/React/"/>
    
    <category term="Webpack" scheme="https://yuliascott.github.io/blog/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Nginx部署Hexo并配置域名</title>
    <link href="https://yuliascott.github.io/blog/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/nginx%E9%83%A8%E7%BD%B2hexo%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/"/>
    <id>https://yuliascott.github.io/blog/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/nginx%E9%83%A8%E7%BD%B2hexo%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/</id>
    <published>2021-01-06T15:13:48.000Z</published>
    <updated>2021-03-13T03:19:22.943Z</updated>
    
    <content type="html"><![CDATA[<p>使用nginx部署博客网站，并在国外网站(cloudflare)配置域名解析。</p><br /><br /><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="###写在前面"></a>###写在前面</h1><ol><li>本文的内容全部基于《搭建个人博客网站》</li><li>为确保网站运行正常，除了基于github外，又使用Nginx服务器部署，网站内容完全相同</li><li>Nginx服务器绑定的域名是www.example.com，基于github绑定的域名是blog.example.com，并且都支持https（本文不涉及cloudflare如何申请https密钥和github如何设置使用https）</li><li>先前Nginx服务器运行在腾讯云 window server 2019（nginx为1.18.0稳定版），且阿里云购买的域名，域名解析也在阿里云，后来网站无法运行，提示需要域名备案</li><li>域名备案过程中，提示“备案和云服务器提供商必须一致”。有两种方式解决：1）购买腾讯云服务器，平时服务器使用不多，不打算购买；2）将阿里云域名转入腾讯云，不过域名需强制续费一年，但我使用的是朋友的腾讯云，备案实名认证多少有些不方便。最后我选择在GoDaddy购买域名，cloudflare进行域名解析，与此同时，我有一台VPS服务器(购买的是伦敦的，ubuntu)</li><li>Nginx服务器运行在ubuntu，静态页面保存在根目录/web/public目录</li></ol><br /><br /><h1 id="一、Nginx配置"><a href="#一、Nginx配置" class="headerlink" title="一、Nginx配置"></a>一、Nginx配置</h1><p>1、配置http网站</p><p>1）XShell远程连接ubuntu，Xftp可视化操作ubuntu文件夹，在根目录(/)新建文件夹web；</p><p>2）执行<code>yarn build</code>，生成的public文件夹保存到web目录下，静态页面保存的路径是/web/public</p><p>3）编辑/etc/nginx/nginx.conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        <span class="comment"># root         /usr/share/nginx/html;</span></span><br><span class="line">        root         /web/public;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        root/web/public;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br /><p>2、配置https</p><p>1）在cloudflare上申请https 密钥（申请过程省略），即生成两个PEM密钥文件</p><p>2）在/etc/nginx路径下新建文件夹conf.d，再新建文件夹cert（即/etc/nginx/conf.d/cert），将生成的PEM文件放在该路径下</p><p>3）编辑/etc/nginx/nginx.conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Settings for a TLS enabled server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2 default_server;</span><br><span class="line">    listen       [::]:443 ssl http2 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /web/public; <span class="comment">#/usr/share/nginx/html;</span></span><br><span class="line"></span><br><span class="line">    ssl_certificate <span class="string">&quot;/etc/nginx/conf.d/cert/cert.pem&quot;</span>; <span class="comment">#&quot;/etc/pki/nginx/server.crt&quot;;</span></span><br><span class="line">    ssl_certificate_key <span class="string">&quot;/etc/nginx/conf.d/cert/key.pem&quot;</span>; <span class="comment">#&quot;/etc/pki/nginx/private/server.key&quot;;</span></span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_ciphers PROFILE=SYSTEM;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    root/web/public;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>————————————————————————————————————————————————————————————————————————————————</p><h1 id="二、配置域名解析"><a href="#二、配置域名解析" class="headerlink" title="二、配置域名解析"></a>二、配置域名解析</h1><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/cloudflareDNS.png" alt="cloudflare配置域名解析"><br><br /><br>输入www.example.com或example.com或blog.example.com，可同时访问。</p><p>————————————————————————————————————————————————————————————————————————————————</p><h1 id="附：国外域名备案说明"><a href="#附：国外域名备案说明" class="headerlink" title="附：国外域名备案说明"></a>附：国外域名备案说明</h1><p>四种组合：</p><p>国外域名+国外服务器，不需要备案；</p><p>国外域名+国内服务器，无法直接解析；</p><p>国内域名+国内服务器，需要；</p><p>国内域名+国外服务器，好像不太这么用；</p><br /><p>（完）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用nginx部署博客网站，并在国外网站(cloudflare)配置域名解析。&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;###写在前面&quot;&gt;&lt;/a&gt;###写在前面&lt;/</summary>
      
    
    
    
    <category term="工具教程" scheme="https://yuliascott.github.io/blog/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://yuliascott.github.io/blog/tags/Hexo/"/>
    
    <category term="Nginx" scheme="https://yuliascott.github.io/blog/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>技术书籍清单</title>
    <link href="https://yuliascott.github.io/blog/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D%E6%B8%85%E5%8D%95/"/>
    <id>https://yuliascott.github.io/blog/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D%E6%B8%85%E5%8D%95/</id>
    <published>2021-01-04T10:13:48.000Z</published>
    <updated>2021-03-13T03:19:22.943Z</updated>
    
    <content type="html"><![CDATA[<p><em>Web前端：</em><br>——————————<br>《JavaScript设计模式与开发实践》</p><br /><br /><p><em>服务器：</em><br>——————————<br>《Nginx高性能Web服务器详解》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;Web前端：&lt;/em&gt;&lt;br&gt;——————————&lt;br&gt;《JavaScript设计模式与开发实践》&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;p&gt;&lt;em&gt;服务器：&lt;/em&gt;&lt;br&gt;——————————&lt;br&gt;《Nginx高性能Web服务器详解》&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术读物" scheme="https://yuliascott.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E8%AF%BB%E7%89%A9/"/>
    
    
    <category term="书籍推荐" scheme="https://yuliascott.github.io/blog/tags/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>NET开发笔记</title>
    <link href="https://yuliascott.github.io/blog/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/NET%E7%AC%94%E8%AE%B0/"/>
    <id>https://yuliascott.github.io/blog/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/NET%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-31T10:13:48.000Z</published>
    <updated>2021-03-13T03:19:22.943Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是Asp.NET开发备忘录，主要记录开发过程中的问题和思考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文主要是Asp.NET开发备忘录，主要记录开发过程中的问题和思考。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程语言" scheme="https://yuliascott.github.io/blog/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="NET" scheme="https://yuliascott.github.io/blog/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客网站</title>
    <link href="https://yuliascott.github.io/blog/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>https://yuliascott.github.io/blog/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</id>
    <published>2020-12-28T15:58:14.000Z</published>
    <updated>2021-03-13T03:19:22.943Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo搭建博客网站，Travis CI自动集成。<br><br /><br>使用Github pages搭建Hexo静态博客网站，Hexo将编写的md文档解析渲染成Html网页，通过git推送到github，Travis CI自动检测提交的内容，根据.travis.yml自动生成、部署静态网页。<br><br /><br>参考链接：<br><a href="https://www.bilibili.com/read/cv2884489%EF%BC%88%E6%96%87%E5%AD%97%EF%BC%89">https://www.bilibili.com/read/cv2884489（文字）</a></p><p><a href="https://www.bilibili.com/video/av55852851/?p=1%EF%BC%88%E8%A7%86%E9%A2%91%EF%BC%89">https://www.bilibili.com/video/av55852851/?p=1（视频）</a><br><br /><br /></p><h1 id="搭建思路"><a href="#搭建思路" class="headerlink" title="### 搭建思路"></a>### 搭建思路</h1><p>首先hexo博客的源码放在master分支上，生成的静态页面放在gh-pages分支上。当然也可以新建两个仓库，一个仓库放hexo源码，一个仓库放生成的静态页面。<br><br /></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="### 写在前面"></a>### 写在前面</h1><p>所需环境&amp;工具：</p><ul><li>node</li><li>git</li><li>Typora（编写md文章）<br /></li></ul><p><em>注：本文不涉及安装node环境和git工具；本文不涉及如何更换snippet主题；</em><br><br /></p><h1 id="一、创建token"><a href="#一、创建token" class="headerlink" title="一、创建token"></a>一、创建token</h1><p>在github上创建token：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/githubtoken.png" alt="github创建token"><br><br /><br><strong><font color=red>创建完成后，一定要复制生成的token！！！</font></strong></p><p>————————————————————————————————————————————————————————————————————————————————</p><h1 id="二、创建hexo"><a href="#二、创建hexo" class="headerlink" title="二、创建hexo"></a>二、创建hexo</h1><p>官网链接：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br><br /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>————————————————————————————————————————————————————————————————————————————————</p><h1 id="三、创建repository"><a href="#三、创建repository" class="headerlink" title="三、创建repository"></a>三、创建repository</h1><p>在github上创建仓库(仓库名称blog，<font color=red>不需要以github.io结尾</font>)，提交代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin https://github.com/xxxxx/xxxxxx.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>————————————————————————————————————————————————————————————————————————————————</p><h1 id="四、创建branch"><a href="#四、创建branch" class="headerlink" title="四、创建branch"></a>四、创建branch</h1><p>新建gh-pages分支(注意：<font color=red>gh-pages分支名，不可随意更改</font>)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b gh-pages</span><br><span class="line">除了.git文件夹删除所有文件</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;gh-pages first commit&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//至此，源码分支和gh-pages分支已经全部弄好了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">切回master分支：git checkout master</span><br><span class="line"></span><br><span class="line">切回master分支后，提交代码：1）git push origin master  2）git push origin gh-pages</span><br></pre></td></tr></table></figure><p>————————————————————————————————————————————————————————————————————————————————</p><h1 id="五、配置travis-CI"><a href="#五、配置travis-CI" class="headerlink" title="五、配置travis CI"></a>五、配置travis CI</h1><p>打开Travis CI官网，用github来登陆，勾上对应的仓库：</p><p><img src="https://cdn.jsdelivr.net/gh/YuliaScott/blogpic/img/travisci.png" alt="travisci选择仓库"><br><br /><br>点击“settings”，添加<code>Environment Variables</code>，在下方的Name里填入你自定义的名字（如hexoblog_token），右边的value填入github上申请的token，然后点击add</p><p>————————————————————————————————————————————————————————————————————————————————</p><h1 id="六、配置travis-yml"><a href="#六、配置travis-yml" class="headerlink" title="六、配置travis.yml"></a>六、配置travis.yml</h1><p>在项目根目录下新建文件.travis.yml，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable  <span class="comment">#要安装的node版本为当前的稳定版</span></span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules  <span class="comment">#要缓存的文件夹</span></span><br><span class="line">install:</span><br><span class="line"> <span class="comment"># - npm install hexo-cli -g</span></span><br><span class="line">  - npm install</span><br><span class="line">script:</span><br><span class="line">  - hexo clean  <span class="comment">#清除</span></span><br><span class="line">  - hexo g  <span class="comment">#生成</span></span><br><span class="line">after_script:  <span class="comment">#最后执行的命令</span></span><br><span class="line">  - <span class="built_in">cd</span> ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name <span class="string">&quot;your_name&quot;</span></span><br><span class="line">  - git config user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">  - git add . </span><br><span class="line">  - git commit -m <span class="string">&quot;automatic code deployment&quot;</span></span><br><span class="line">  - git push --force --quiet <span class="string">&quot;https://<span class="variable">$&#123;hexoblog_token&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>&quot;</span> master:gh-pages  <span class="comment">#hexoblog_token与travis ci设置的环境变量名相同</span></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">   - master <span class="comment">#触发持续集成的分支</span></span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">  - GH_REF: github.com/xxxxxx/xxx.git <span class="comment">#就是github上存放博客最终文件的仓库地址末尾加上.git</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加完成，切换到master分支，提交代码<br>————————————————————————————————————————————————————————————————————————————————</p><h1 id="七、新建md文章"><a href="#七、新建md文章" class="headerlink" title="七、新建md文章"></a>七、新建md文章</h1><p>执行hexo命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&#x27;article&#x27;</span></span><br></pre></td></tr></table></figure><p>执行完上面的命令，在文件夹source里面的_posts文件夹里面找到刚刚新建的article.md，编辑内容，提交代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">date: xxxx</span><br><span class="line">tags: <span class="string">&#x27;xxxx&#x27;</span>  <span class="comment">#[&#x27;xxxx1&#x27;,&#x27;xxxx2&#x27;,&#x27;xxxx3&#x27;...]</span></span><br><span class="line">categories: <span class="string">&#x27;xxxxxx&#x27;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>打开travis ci 官网，在监控的仓库中找到Build History查看提交的状态。<br>————————————————————————————————————————————————————————————————————————————————</p><h1 id="八、图床神器PicGo"><a href="#八、图床神器PicGo" class="headerlink" title="八、图床神器PicGo"></a>八、图床神器PicGo</h1><p>Markdown语法的特殊性使得图片的插入到文章尤为困难，本文由此而来。</p><p>所谓图床工具，就是自动把本地图片转换成链接的一款工具，支持七牛云，腾讯云COS，又拍云，GitHub，阿里云 OSS，SM.MS，Imgur 等8种常用图床。<br><br /><br>安装包下载：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><ul><li><em>windows 选择 exe</em></li><li><em>mac 选择 dmg</em></li><li><em>linux选择 AppImage</em></li></ul><p>注：mac 用户，直接使用brew cask来安装PicGo，简单方便：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask picgo</span><br></pre></td></tr></table></figure><br />我使用的是Github图床：<br />===》登录Github创建Repository(如blogpic)，设置为public；<br />===》创建token，填写描述，选择repo，然后点击Generate token按钮，创建完成后复制保存；<br />===》安装配置PicGo；<br />===》上传图片，Github仓库查看图片；<br /><br /><blockquote><p>安装配置PicGo:</p><ol><li>设定仓库名的时候，是按照”账户名/仓库名”的格式填写；</li><li>分支名统一填写”master”；</li><li>将github创建的Token粘贴到这里；</li><li>存储的路径如图，会在repository下创建一个”img”文件夹；</li><li>自定义域名的作用是，在上传图片成功后，PicGo会将”自定义域名+上传的图片名”生成的访问链接放到剪切板：https://raw.githubusercontent.com/用户名/RepositoryName/分支名 或者使用cdn加速：https://cdn.jsdelivr.net/gh/用户名/RepositoryName 来加速</li></ol></blockquote><p>————————————————————————————————————————————————————————————————————————————————</p><h1 id="九、RSS订阅"><a href="#九、RSS订阅" class="headerlink" title="九、RSS订阅"></a>九、RSS订阅</h1><p>RSS(Really Simple Syndication) 简易信息聚合，是一种描述同步网站内容的格式(xml格式)，可以通过订阅RSS源在RSS阅读器上获取更新的信息。</p><p>执行yarn或npm命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-generator-feed --save </span><br><span class="line">或</span><br><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>snippet/_config.yml文件添加：rss: /atom.xml</p><br /><p>（完）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用Hexo搭建博客网站，Travis CI自动集成。&lt;br&gt;&lt;br /&gt;&lt;br&gt;使用Github pages搭建Hexo静态博客网站，Hexo将编写的md文档解析渲染成Html网页，通过git推送到github，Travis CI自动检测提交的内容，根据.travis.y</summary>
      
    
    
    
    <category term="工具教程" scheme="https://yuliascott.github.io/blog/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://yuliascott.github.io/blog/tags/Hexo/"/>
    
    <category term="Travis CI" scheme="https://yuliascott.github.io/blog/tags/Travis-CI/"/>
    
    <category term="Github" scheme="https://yuliascott.github.io/blog/tags/Github/"/>
    
  </entry>
  
</feed>
